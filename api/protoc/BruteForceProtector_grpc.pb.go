// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: BruteForceProtector.proto

package brute_force_protector

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BruteForceProtectorServiceClient is the client API for BruteForceProtectorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BruteForceProtectorServiceClient interface {
	Authorization(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	ResetBuckets(ctx context.Context, in *ResetBucketRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	AddBlackListIP(ctx context.Context, in *SubnetRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	DeleteBlackListIP(ctx context.Context, in *SubnetRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	AddWhiteListIP(ctx context.Context, in *SubnetRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	DeleteWhiteListIP(ctx context.Context, in *SubnetRequest, opts ...grpc.CallOption) (*StatusResponse, error)
}

type bruteForceProtectorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBruteForceProtectorServiceClient(cc grpc.ClientConnInterface) BruteForceProtectorServiceClient {
	return &bruteForceProtectorServiceClient{cc}
}

func (c *bruteForceProtectorServiceClient) Authorization(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/authorization.BruteForceProtectorService/Authorization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bruteForceProtectorServiceClient) ResetBuckets(ctx context.Context, in *ResetBucketRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/authorization.BruteForceProtectorService/ResetBuckets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bruteForceProtectorServiceClient) AddBlackListIP(ctx context.Context, in *SubnetRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/authorization.BruteForceProtectorService/AddBlackListIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bruteForceProtectorServiceClient) DeleteBlackListIP(ctx context.Context, in *SubnetRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/authorization.BruteForceProtectorService/DeleteBlackListIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bruteForceProtectorServiceClient) AddWhiteListIP(ctx context.Context, in *SubnetRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/authorization.BruteForceProtectorService/AddWhiteListIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bruteForceProtectorServiceClient) DeleteWhiteListIP(ctx context.Context, in *SubnetRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/authorization.BruteForceProtectorService/DeleteWhiteListIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BruteForceProtectorServiceServer is the server API for BruteForceProtectorService service.
// All implementations must embed UnimplementedBruteForceProtectorServiceServer
// for forward compatibility
type BruteForceProtectorServiceServer interface {
	Authorization(context.Context, *AuthRequest) (*StatusResponse, error)
	ResetBuckets(context.Context, *ResetBucketRequest) (*StatusResponse, error)
	AddBlackListIP(context.Context, *SubnetRequest) (*StatusResponse, error)
	DeleteBlackListIP(context.Context, *SubnetRequest) (*StatusResponse, error)
	AddWhiteListIP(context.Context, *SubnetRequest) (*StatusResponse, error)
	DeleteWhiteListIP(context.Context, *SubnetRequest) (*StatusResponse, error)
	mustEmbedUnimplementedBruteForceProtectorServiceServer()
}

// UnimplementedBruteForceProtectorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBruteForceProtectorServiceServer struct {
}

func (UnimplementedBruteForceProtectorServiceServer) Authorization(context.Context, *AuthRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authorization not implemented")
}
func (UnimplementedBruteForceProtectorServiceServer) ResetBuckets(context.Context, *ResetBucketRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetBuckets not implemented")
}
func (UnimplementedBruteForceProtectorServiceServer) AddBlackListIP(context.Context, *SubnetRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBlackListIP not implemented")
}
func (UnimplementedBruteForceProtectorServiceServer) DeleteBlackListIP(context.Context, *SubnetRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBlackListIP not implemented")
}
func (UnimplementedBruteForceProtectorServiceServer) AddWhiteListIP(context.Context, *SubnetRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddWhiteListIP not implemented")
}
func (UnimplementedBruteForceProtectorServiceServer) DeleteWhiteListIP(context.Context, *SubnetRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWhiteListIP not implemented")
}
func (UnimplementedBruteForceProtectorServiceServer) mustEmbedUnimplementedBruteForceProtectorServiceServer() {
}

// UnsafeBruteForceProtectorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BruteForceProtectorServiceServer will
// result in compilation errors.
type UnsafeBruteForceProtectorServiceServer interface {
	mustEmbedUnimplementedBruteForceProtectorServiceServer()
}

func RegisterBruteForceProtectorServiceServer(s grpc.ServiceRegistrar, srv BruteForceProtectorServiceServer) {
	s.RegisterService(&BruteForceProtectorService_ServiceDesc, srv)
}

func _BruteForceProtectorService_Authorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BruteForceProtectorServiceServer).Authorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authorization.BruteForceProtectorService/Authorization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BruteForceProtectorServiceServer).Authorization(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BruteForceProtectorService_ResetBuckets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BruteForceProtectorServiceServer).ResetBuckets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authorization.BruteForceProtectorService/ResetBuckets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BruteForceProtectorServiceServer).ResetBuckets(ctx, req.(*ResetBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BruteForceProtectorService_AddBlackListIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BruteForceProtectorServiceServer).AddBlackListIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authorization.BruteForceProtectorService/AddBlackListIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BruteForceProtectorServiceServer).AddBlackListIP(ctx, req.(*SubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BruteForceProtectorService_DeleteBlackListIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BruteForceProtectorServiceServer).DeleteBlackListIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authorization.BruteForceProtectorService/DeleteBlackListIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BruteForceProtectorServiceServer).DeleteBlackListIP(ctx, req.(*SubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BruteForceProtectorService_AddWhiteListIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BruteForceProtectorServiceServer).AddWhiteListIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authorization.BruteForceProtectorService/AddWhiteListIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BruteForceProtectorServiceServer).AddWhiteListIP(ctx, req.(*SubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BruteForceProtectorService_DeleteWhiteListIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BruteForceProtectorServiceServer).DeleteWhiteListIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authorization.BruteForceProtectorService/DeleteWhiteListIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BruteForceProtectorServiceServer).DeleteWhiteListIP(ctx, req.(*SubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BruteForceProtectorService_ServiceDesc is the grpc.ServiceDesc for BruteForceProtectorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BruteForceProtectorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "authorization.BruteForceProtectorService",
	HandlerType: (*BruteForceProtectorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authorization",
			Handler:    _BruteForceProtectorService_Authorization_Handler,
		},
		{
			MethodName: "ResetBuckets",
			Handler:    _BruteForceProtectorService_ResetBuckets_Handler,
		},
		{
			MethodName: "AddBlackListIP",
			Handler:    _BruteForceProtectorService_AddBlackListIP_Handler,
		},
		{
			MethodName: "DeleteBlackListIP",
			Handler:    _BruteForceProtectorService_DeleteBlackListIP_Handler,
		},
		{
			MethodName: "AddWhiteListIP",
			Handler:    _BruteForceProtectorService_AddWhiteListIP_Handler,
		},
		{
			MethodName: "DeleteWhiteListIP",
			Handler:    _BruteForceProtectorService_DeleteWhiteListIP_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "BruteForceProtector.proto",
}
